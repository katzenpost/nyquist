// Copyright (C) 2021 Oasis Labs Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
// IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
// PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package tuplehash

import (
	"math"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestLeftEncode(t *testing.T) {
	require := require.New(t)

	testVectors := []struct {
		x uint64
		b []byte
	}{
		{
			x: 0,
			b: []byte{1, 0},
		},
		{
			x: 1,
			b: []byte{1, 1},
		},
		{
			x: 256,
			b: []byte{2, 1, 0},
		},
		{
			x: 0xebebeb,
			b: []byte{3, 0xeb, 0xeb, 0xeb},
		},
		{
			x: 0xfacade,
			b: []byte{3, 0xfa, 0xca, 0xde},
		},
		{
			x: 0xdeadbeef,
			b: []byte{4, 0xde, 0xad, 0xbe, 0xef},
		},
		{
			x: math.MaxUint64,
			b: []byte{8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		},
	}

	for _, v := range testVectors {
		b := leftEncode(v.x)
		require.EqualValues(v.b, b, "leftEncode(%d): Got %x, expected %x", v.x, b, v.b)
	}
}

func TestRightEncode(t *testing.T) {
	require := require.New(t)

	testVectors := []struct {
		x uint64
		b []byte
	}{
		{
			x: 0,
			b: []byte{0, 1},
		},
		{
			x: 1,
			b: []byte{1, 1},
		},
		{
			x: 256,
			b: []byte{1, 0, 2},
		},
		{
			x: 0xebebeb,
			b: []byte{0xeb, 0xeb, 0xeb, 3},
		},
		{
			x: 0xfacade,
			b: []byte{0xfa, 0xca, 0xde, 3},
		},
		{
			x: 0xdeadbeef,
			b: []byte{0xde, 0xad, 0xbe, 0xef, 4},
		},
		{
			x: math.MaxUint64,
			b: []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 8},
		},
	}

	for _, v := range testVectors {
		b := rightEncode(v.x)
		require.EqualValues(v.b, b, "rightEncode(%d): Got %x, expected %x", v.x, b, v.b)
	}
}

func TestVectors(t *testing.T) {
	t.Run("TupleHash128", testVectors128)
	t.Run("TupleHash256", testVectors256)
}

// Test vectors courtesy of NIST
// https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/TupleHash_samples.pdf

type testVector struct {
	X [][]byte
	S []byte
	L int

	output []byte
}

func testVectors128(t *testing.T) {
	require := require.New(t)

	for i, vec := range []testVector{
		{
			X: [][]byte{
				{0x00, 0x01, 0x02},
				{0x10, 0x11, 0x12, 0x13, 0x14, 0x15},
			},
			S: []byte{},
			L: 32,
			output: []byte{
				0xc5, 0xd8, 0x78, 0x6c, 0x1a, 0xfb, 0x9b, 0x82, 0x11, 0x1a, 0xb3, 0x4b, 0x65, 0xb2, 0xc0, 0x04,
				0x8f, 0xa6, 0x4e, 0x6d, 0x48, 0xe2, 0x63, 0x26, 0x4c, 0xe1, 0x70, 0x7d, 0x3f, 0xfc, 0x8e, 0xd1,
			},
		},
		{
			X: [][]byte{
				{0x00, 0x01, 0x02},
				{0x10, 0x11, 0x12, 0x13, 0x14, 0x15},
			},
			S: []byte("My Tuple App"),
			L: 32,
			output: []byte{
				0x75, 0xcd, 0xb2, 0x0f, 0xf4, 0xdb, 0x11, 0x54, 0xe8, 0x41, 0xd7, 0x58, 0xe2, 0x41, 0x60, 0xc5,
				0x4b, 0xae, 0x86, 0xeb, 0x8c, 0x13, 0xe7, 0xf5, 0xf4, 0x0e, 0xb3, 0x55, 0x88, 0xe9, 0x6d, 0xfb,
			},
		},
		{
			X: [][]byte{
				{0x00, 0x01, 0x02},
				{0x10, 0x11, 0x12, 0x13, 0x14, 0x15},
				{0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28},
			},
			S: []byte("My Tuple App"),
			L: 32,
			output: []byte{
				0xe6, 0x0f, 0x20, 0x2c, 0x89, 0xa2, 0x63, 0x1e, 0xda, 0x8d, 0x4c, 0x58, 0x8c, 0xa5, 0xfd, 0x07,
				0xf3, 0x9e, 0x51, 0x51, 0x99, 0x8d, 0xec, 0xcf, 0x97, 0x3a, 0xdb, 0x38, 0x04, 0xbb, 0x6e, 0x84,
			},
		},
	} {
		h := New128(vec.L, vec.S)
		for _, x := range vec.X {
			_, _ = h.Write(x)
		}
		out := h.Sum(nil)
		require.Equal(vec.output, out, "[%d]: Output mismatch", i)
	}
}

func testVectors256(t *testing.T) {
	require := require.New(t)

	for i, vec := range []testVector{
		{
			X: [][]byte{
				{0x00, 0x01, 0x02},
				{0x10, 0x11, 0x12, 0x13, 0x14, 0x15},
			},
			S: []byte{},
			L: 64,
			output: []byte{
				0xcf, 0xb7, 0x05, 0x8c, 0xac, 0xa5, 0xe6, 0x68, 0xf8, 0x1a, 0x12, 0xa2, 0x0a, 0x21, 0x95, 0xce,
				0x97, 0xa9, 0x25, 0xf1, 0xdb, 0xa3, 0xe7, 0x44, 0x9a, 0x56, 0xf8, 0x22, 0x01, 0xec, 0x60, 0x73,
				0x11, 0xac, 0x26, 0x96, 0xb1, 0xab, 0x5e, 0xa2, 0x35, 0x2d, 0xf1, 0x42, 0x3b, 0xde, 0x7b, 0xd4,
				0xbb, 0x78, 0xc9, 0xae, 0xd1, 0xa8, 0x53, 0xc7, 0x86, 0x72, 0xf9, 0xeb, 0x23, 0xbb, 0xe1, 0x94,
			},
		},
		{
			X: [][]byte{
				{0x00, 0x01, 0x02},
				{0x10, 0x11, 0x12, 0x13, 0x14, 0x15},
			},
			S: []byte("My Tuple App"),
			L: 64,
			output: []byte{
				0x14, 0x7c, 0x21, 0x91, 0xd5, 0xed, 0x7e, 0xfd, 0x98, 0xdb, 0xd9, 0x6d, 0x7a, 0xb5, 0xa1, 0x16,
				0x92, 0x57, 0x6f, 0x5f, 0xe2, 0xa5, 0x06, 0x5f, 0x3e, 0x33, 0xde, 0x6b, 0xba, 0x9f, 0x3a, 0xa1,
				0xc4, 0xe9, 0xa0, 0x68, 0xa2, 0x89, 0xc6, 0x1c, 0x95, 0xaa, 0xb3, 0x0a, 0xee, 0x1e, 0x41, 0x0b,
				0x0b, 0x60, 0x7d, 0xe3, 0x62, 0x0e, 0x24, 0xa4, 0xe3, 0xbf, 0x98, 0x52, 0xa1, 0xd4, 0x36, 0x7e,
			},
		},
		{
			X: [][]byte{
				{0x00, 0x01, 0x02},
				{0x10, 0x11, 0x12, 0x13, 0x14, 0x15},
				{0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28},
			},
			S: []byte("My Tuple App"),
			L: 64,
			output: []byte{
				0x45, 0x00, 0x0b, 0xe6, 0x3f, 0x9b, 0x6b, 0xfd, 0x89, 0xf5, 0x47, 0x17, 0x67, 0x0f, 0x69, 0xa9,
				0xbc, 0x76, 0x35, 0x91, 0xa4, 0xf0, 0x5c, 0x50, 0xd6, 0x88, 0x91, 0xa7, 0x44, 0xbc, 0xc6, 0xe7,
				0xd6, 0xd5, 0xb5, 0xe8, 0x2c, 0x01, 0x8d, 0xa9, 0x99, 0xed, 0x35, 0xb0, 0xbb, 0x49, 0xc9, 0x67,
				0x8e, 0x52, 0x6a, 0xbd, 0x8e, 0x85, 0xc1, 0x3e, 0xd2, 0x54, 0x02, 0x1d, 0xb9, 0xe7, 0x90, 0xce,
			},
		},
	} {
		h := New256(vec.L, vec.S)
		for _, x := range vec.X {
			_, _ = h.Write(x)
		}
		out := h.Sum(nil)
		require.Equal(vec.output, out, "[%d]: Output mismatch", i)
	}
}
